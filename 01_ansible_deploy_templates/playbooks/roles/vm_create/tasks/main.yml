- name: Set VM hardware variables based on distribution
  set_fact:
    vm_vmid:    "{{ ROUTER.VM_VMID if DISTRIBUTION == 'openwrt' else GUEST.VM_VMID }}"
    vm_name:    "{{ ROUTER.VM_NAME if DISTRIBUTION == 'openwrt' else GUEST.VM_NAME }}"
    vm_machine: "{{ ROUTER.VM_MACHINE if DISTRIBUTION == 'openwrt' else GUEST.VM_MACHINE }}"
    vm_memory:  "{{ ROUTER.VM_MEMORY if DISTRIBUTION == 'openwrt' else GUEST.VM_MEMORY }}"
    vm_cpu:     "{{ ROUTER.VM_CPU if DISTRIBUTION == 'openwrt' else GUEST.VM_CPU }}"
    vm_cores:   "{{ ROUTER.VM_CORES if DISTRIBUTION == 'openwrt' else GUEST.VM_CORES }}"
    vm_vga:     "{{ ROUTER.VM_DISPLAY if DISTRIBUTION == 'openwrt' else GUEST.VM_DISPLAY }}"
    vm_agent:   "{{ 0 if DISTRIBUTION == 'openwrt' else 1 }}"
    vm_net: >-
      {{
        {
          'net0': "virtio,bridge=" ~ ROUTER.VM_BRIDGE   ~ ",firewall=0",
          'net1': "virtio,bridge=" ~ ROUTER.VM_BRIDGE_2 ~ ",firewall=0"
        } if DISTRIBUTION == 'openwrt'
        else {
          'net0': "virtio,bridge=" ~ GUEST.VM_BRIDGE ~ ",firewall=1"
        }
      }}

- name: Create new VM in Proxmox
  community.general.proxmox_kvm:
    api_user: "{{ PROXMOX_USER }}@pam"
    api_password: "{{ PROXMOX_PASSWORD }}"
    api_host: "{{ PROXMOX_HOST }}"
    node: "{{ PROXMOX_NODE }}"
    vmid: "{{ vm_vmid }}"
    name: "{{ vm_name }}"
    machine: "{{ vm_machine }}"
    memory: "{{ vm_memory }}"
    cpu: "{{ vm_cpu }}"
    cores: "{{ vm_cores }}"
    vga: "{{ vm_vga }}"
    agent: "{{ vm_agent }}"
    net: "{{ vm_net }}"
    scsihw: "virtio-scsi-pci"
    ide:
      ide0: "{{ STORAGE_POOL }}:cloudinit,media=cdrom,size=4M"
    serial:
      serial0: socket
    ostype: "l26"
    sockets: 1
    state: present

- name: Import and configure disk
  shell: |
    qm importdisk {{ vm_vmid }} {{ DESTINATION_PATH }}.modified {{ STORAGE_POOL }} &&
    qm set {{ vm_vmid }} --virtio0 {{ STORAGE_POOL }}:vm-{{ vm_vmid }}-disk-0,discard=on,iothread=1 --boot c --bootdisk virtio0
  args:
    creates: "/var/lib/vz/images/{{ vm_vmid }}/vm-{{ vm_vmid }}-disk-0.raw"

- name: Create temporary SSH key file
  copy:
    content: "{{ CLOUD_INIT_SSH_PUBLIC_KEYS }}"
    dest: "/tmp/ssh_key_{{ vm_vmid }}.pub"
    mode: '0600'
  when: DISTRIBUTION != 'openwrt'

- name: Set cloud-init configurations
  shell: |
    qm set {{ vm_vmid }} --ciuser {{ CLOUD_INIT_USER }} --cipassword {{ CLOUD_INIT_PASSWORD }} --sshkeys "/tmp/ssh_key_{{ vm_vmid }}.pub" --ciupgrade 0 --ipconfig0 'ip=dhcp' --ipconfig1 '' --searchdomain "{{ CLOUD_INIT_SEARCHDOMAIN }}" --nameserver "{{ CLOUD_INIT_NAMESERVER }}"
  when: DISTRIBUTION != 'openwrt'

- name: Remove temporary SSH key file
  file:
    path: "/tmp/ssh_key_{{ vm_vmid }}.pub"
    state: absent
  when: DISTRIBUTION != 'openwrt'

- name: Convert VM to template
  command: qm template {{ vm_vmid }}

- name: Verify template creation
  community.general.proxmox_vm_info:
    api_user: "{{ PROXMOX_USER }}@pam"
    api_password: "{{ PROXMOX_PASSWORD }}"
    api_host: "{{ PROXMOX_HOST }}"
    node: "{{ PROXMOX_NODE }}"
    vmid: "{{ vm_vmid }}"
  register: final_vm_info

- name: Cleanup modified image file
  file:
    path: "{{ DESTINATION_PATH }}.modified"
    state: absent
  when: final_vm_info is defined and final_vm_info.proxmox_vms | length > 0

- name: Display results
  debug:
    msg:
      - "VM Info = {{ final_vm_info }}"
