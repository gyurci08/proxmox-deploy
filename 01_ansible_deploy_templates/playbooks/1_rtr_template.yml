---
### Environment validation: distro
- name: Load distribution-specific variables
  hosts: localhost
  become: no
  gather_facts: false
  tasks:
    - name: Check if distribution variable file exists
      stat:
        path: "{{ playbook_dir }}/../vars/distro-openwrt.yml"
      register: DISTRO_FILE

    - name: Fail if distribution variable file does not exist
      fail:
        msg: "Distribution variable file '{{ playbook_dir }}/../vars/distro-openwrt.yml' not found."
      when: not DISTRO_FILE.stat.exists

    - name: Load distribution-specific variables dynamically based on DISTRIBUTION variable
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../vars/distro-openwrt.yml"

    - name: Set global facts for all hosts
      ansible.builtin.set_fact:
        VERSION: "{{ VERSION }}"
        DESTINATION_PATH: "{{ DESTINATION_PATH }}"
        IMAGE_URL: "{{ IMAGE_URL }}"
        PACKAGE_UPDATE_COMMAND: "{{ PACKAGE_UPDATE_COMMAND }}"
        PACKAGE_UPGRADE_COMMAND: "{{ PACKAGE_UPGRADE_COMMAND }}"
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['all'] }}"

### Proxmox validation
- name: Check if host is running Proxmox
  hosts: all
  become: yes
  gather_facts: false
  tasks:
    - name: Check Proxmox version
      ansible.builtin.command:
        cmd: pveversion
      register: PVE_VERSION
      failed_when: PVE_VERSION.rc != 0
      changed_when: false

    - name: Verify Proxmox is installed
      ansible.builtin.assert:
        that:
          - "'pve-manager' in PVE_VERSION.stdout"
        fail_msg: "This host does not appear to be running Proxmox VE"
        success_msg: "Proxmox VE detected: {{ PVE_VERSION.stdout }}"

### Playbook start
- name: Prepare and deploy OpenWRT router template on Proxmox
  hosts: all
  become: yes
  gather_facts: false
  vars_files:
    - ../vars/vars.yml

  tasks:
    - name: Ensure destination directory exists
      ansible.builtin.file:
        path: "/var/lib/vz/template/iso"
        state: directory
        mode: '0755'

    - name: Ensure libguestfs-tools is installed
      ansible.builtin.apt:
        name: libguestfs-tools
        state: present
        update_cache: yes

    - name: Check if extracted OpenWRT image exists
      ansible.builtin.stat:
        path: "{{ DESTINATION_PATH }}"
      register: openwrt_img_extracted

    - name: Show image URL before downloading
      ansible.builtin.debug:
        msg: "Downloading OpenWRT image from: {{ IMAGE_URL }}"
      when: not openwrt_img_extracted.stat.exists

    - name: Download OpenWRT image if extracted image does not exist
      ansible.builtin.get_url:
        url: "{{ IMAGE_URL }}"
        dest: "{{ DESTINATION_PATH }}.gz"
        mode: '0644'
      when: not openwrt_img_extracted.stat.exists
      register: download_result

    - name: Extract OpenWRT image if compressed and not already extracted
      ansible.builtin.command:
        cmd: "gzip -d {{ DESTINATION_PATH }}.gz"
      args:
        removes: "{{ DESTINATION_PATH }}.gz"
        creates: "{{ DESTINATION_PATH }}"
      register: gzip_result
      failed_when: >
        gzip_result.rc != 0 and
        ('trailing garbage ignored' not in gzip_result.stderr)

    - name: Create a copy of the image
      ansible.builtin.copy:
        src: "{{ DESTINATION_PATH }}"
        dest: "{{ DESTINATION_PATH }}.modified"
        remote_src: yes

    - name: Resize copied OpenWRT image if needed
      ansible.builtin.shell: |
        current_size=$(qemu-img info {{ DESTINATION_PATH }}.modified | grep 'virtual size' | awk '{print $3}')
        if [ "$current_size" != "{{ OPENWRT.VM_ROOT_SIZE }}" ]; then
          qemu-img resize -f raw {{ DESTINATION_PATH }}.modified {{ OPENWRT.VM_ROOT_SIZE }}
        fi
      register: RESIZE_RESULT
      changed_when: RESIZE_RESULT.stdout != ""

    - name: Check existing OpenWRT VM
      community.general.proxmox_vm_info:
        api_user: "{{ PROXMOX_USER }}@pam"
        api_password: "{{ PROXMOX_PASSWORD }}"
        api_host: "{{ PROXMOX_HOST }}"
        node: "{{ PROXMOX_NODE }}"
        vmid: "{{ OPENWRT.VM_VMID }}"
      register: VM_INFO

    - name: Stop and remove existing OpenWRT VM if it exists
      when: VM_INFO.proxmox_vms | length > 0
      block:
        - name: Stop existing VM if running
          ansible.builtin.command:
            cmd: "qm stop {{ OPENWRT.VM_VMID }}"
          register: STOP_RESULT
          changed_when: STOP_RESULT.rc == 0
          when: VM_INFO.proxmox_vms[0].status == 'running'
          ignore_errors: yes

        - name: Remove existing VM
          ansible.builtin.command:
            cmd: "qm destroy {{ OPENWRT.VM_VMID }} --purge"
          register: DESTROY_RESULT
          until: DESTROY_RESULT.rc == 0
          retries: 3
          delay: 5

    - name: Create and configure new OpenWRT router VM
      block:
        - name: Create new VM in Proxmox
          community.general.proxmox_kvm:
            api_user: "{{ PROXMOX_USER }}@pam"
            api_password: "{{ PROXMOX_PASSWORD }}"
            api_host: "{{ PROXMOX_HOST }}"
            node: "{{ PROXMOX_NODE }}"
            vmid: "{{ OPENWRT.VM_VMID }}"
            name: "{{ OPENWRT.VM_NAME }}"
            machine: "{{ OPENWRT.VM_MACHINE }}"
            memory: "{{ OPENWRT.VM_MEMORY }}"
            cpu: "{{ OPENWRT.VM_CPU }}"
            cores: "{{ OPENWRT.VM_CORES }}"
            sockets: 1
            vga: "{{ OPENWRT.VM_DISPLAY }}"
            ostype: "l26"
            net:
              net0: "virtio,bridge={{ OPENWRT.VM_BRIDGE }}"
              net1: "virtio,bridge={{ OPENWRT.VM_BRIDGE }}"
            scsihw: "virtio-scsi-pci"
            agent: 0
            serial:
              serial0: socket
            state: present

        - name: Import and configure disk
          ansible.builtin.shell: >
            qm importdisk {{ OPENWRT.VM_VMID }} {{ DESTINATION_PATH }}.modified {{ STORAGE_POOL }} &&
            qm set {{ OPENWRT.VM_VMID }}
            --virtio0 {{ STORAGE_POOL }}:vm-{{ OPENWRT.VM_VMID }}-disk-0,discard=on,iothread=1
            --boot c --bootdisk virtio0 
          args:
            creates: "/var/lib/vz/images/{{ OPENWRT.VM_VMID }}/vm-{{ OPENWRT.VM_VMID }}-disk-0.raw"

    - name: Finalize
      block:
        - name: Convert VM to template
          ansible.builtin.command:
            cmd: qm template {{ OPENWRT.VM_VMID }}

        - name: Verify template creation
          community.general.proxmox_vm_info:
            api_user: "{{ PROXMOX_USER }}@pam"
            api_password: "{{ PROXMOX_PASSWORD }}"
            api_host: "{{ PROXMOX_HOST }}"
            node: "{{ PROXMOX_NODE }}"
            vmid: "{{ OPENWRT.VM_VMID }}"
          register: FINAL_VM_INFO

        - name: Cleanup modified image file
          ansible.builtin.file:
            path: "{{ DESTINATION_PATH }}.modified"
            state: absent
          when: FINAL_VM_INFO is defined and FINAL_VM_INFO.proxmox_vms | length > 0

        - name: Display results
          ansible.builtin.debug:
            msg:
              - "Download Result = {{ download_result }}"
              - "Resize Result = {{ RESIZE_RESULT }}"
              - "VM Info = {{ FINAL_VM_INFO }}"
